---
layout:     post
title:      "Making the jump to HTTPS"
subtitle:   "Don't fear the crypto"
date:       2015-12-28 12:00:00
header-img: "img/castle-505878_960_720.jpg"
published:  true
category:   Thoughts
catname:    Thoughts
---

After reading an article about the revolutionary Let's Encrypt certificate authority, I felt compelled to do my part towards making the web a safer place and resolved to add HTTPS to my site.

Major credit goes to:
[Let's Encrypt Certificate Authority](https://letsencrypt.org) and
[Install Let's Encrypt SSL Certificates nginx](https://alexanderbell.info/2015/11/install-lets-encrypt-ssl-certificates-nginx/)

Let's Encrypt is an effort of the Electronic Frontier Foundation to protect the web from surveillance and censorship by encrypting as much web traffic as possible. To do this, they established the Let's Encrypt Certificate Authority (CA) to freely create new certificates, a service that has historically been charged for. Since Let's Encrypt has been cross-signed by IdentTrust, it's certificates (such as mine!) are now trusted by modern web browsers. 

The process of switching from HTTP to HTTPS was fairly simple in itself, consisting of only two main steps. First, obtain a certificate; and second, configure nginx to use the certificate and redirect insecure requests to HTTPS.

Getting a certificate from Let's Encrypt was as simple as running a few commands. First, we have to clone the repo and cd into it:

```$ git clone https://github.com/letsencrypt/letsencrypt```

```$ cd letsencrypt```

Let's Encrypt has an automatic installation function, however this currently only works for Apache (with nginx support on the way!).

Use the following command to generate the certificates for nginx in ```/etc/letsencrypt/live/YOURSITE.com/```

```
$ ./letsencrypt-auto certonly \
-a standalone \
-d www.YOURSITE.com \
-d YOURSITE.com \
--server https://acme-v01.api.letsencrypt.org/directory
```

Once we have generated the certificates, we have to tell nginx to use them to establish a secure connection with clients. Let's modify the server config:

```$ sudo nano /etc/nginx/sites-available/YOURSITE.com```

Config the file like below to enable ssl:

![Nginx Config](/img/posts/nginx-ssl-config.jpg "Nginx SSL Configuration")

This configuration will redirect all HTTP requests to HTTPS. We point the server to the location of the certificate and private key to enable ssl. At this point, we have functioning SSL, however we can still further optimize the encryption. We can manually specify the TLS protocol, use our own Diffie-Hellman parameters, enable HSTS and turn on OCSP Stapling to decrease response time.

Let's generate our own DH parameters while we're at it instead of using the default (this may take a while):

```$ sudo openssl dhparam 2048 -out /etc/ssl/private/dhparams.pem```

Now let's reload nginx

```$ sudo service nginx reload```

We can test our SSL implementation via [SSL Labs](https://www.ssllabs.com/ssltest/). At the time of writing, stevenschadwick.com is receiving an A+ rating.

![SSL Rating](/img/posts/ssl-labs-rating.jpg "SSL Labs Rating")
